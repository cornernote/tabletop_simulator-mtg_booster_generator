{
  "SaveName": "MTG Booster Generator",
  "EpochTime": 1757859353,
  "Date": "9/14/2025 11:45:53 PM",
  "VersionNumber": "v13.3",
  "GameMode": "DND Measurement Injector",
  "GameType": "Utility",
  "GameComplexity": "Low Complexity",
  "PlayingTime": [
    0,
    0
  ],
  "PlayerCounts": [
    0,
    0
  ],
  "Tags": [
    "Components"
  ],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "Table_RPG",
  "Sky": "Sky_Tunnel",
  "Note": "",
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "1": {
      "title": "White",
      "body": "",
      "color": "White",
      "visibleColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "id": 1
    },
    "2": {
      "title": "Brown",
      "body": "",
      "color": "Brown",
      "visibleColor": {
        "r": 0.443,
        "g": 0.231,
        "b": 0.09
      },
      "id": 2
    },
    "3": {
      "title": "Red",
      "body": "",
      "color": "Red",
      "visibleColor": {
        "r": 0.856,
        "g": 0.1,
        "b": 0.094
      },
      "id": 3
    },
    "4": {
      "title": "Orange",
      "body": "",
      "color": "Orange",
      "visibleColor": {
        "r": 0.956,
        "g": 0.392,
        "b": 0.113
      },
      "id": 4
    },
    "5": {
      "title": "Yellow",
      "body": "",
      "color": "Yellow",
      "visibleColor": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.172
      },
      "id": 5
    },
    "6": {
      "title": "Green",
      "body": "",
      "color": "Green",
      "visibleColor": {
        "r": 0.192,
        "g": 0.701,
        "b": 0.168
      },
      "id": 6
    },
    "7": {
      "title": "Blue",
      "body": "",
      "color": "Blue",
      "visibleColor": {
        "r": 0.118,
        "g": 0.53,
        "b": 1.0
      },
      "id": 7
    },
    "8": {
      "title": "Teal",
      "body": "",
      "color": "Teal",
      "visibleColor": {
        "r": 0.129,
        "g": 0.694,
        "b": 0.607
      },
      "id": 8
    },
    "9": {
      "title": "Purple",
      "body": "",
      "color": "Purple",
      "visibleColor": {
        "r": 0.627,
        "g": 0.125,
        "b": 0.941
      },
      "id": 9
    },
    "10": {
      "title": "Pink",
      "body": "",
      "color": "Pink",
      "visibleColor": {
        "r": 0.96,
        "g": 0.439,
        "b": 0.807
      },
      "id": 10
    },
    "11": {
      "title": "Black",
      "body": "",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 11
    }
  },
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": false,
    "Offset": true,
    "BothSnapping": false,
    "xSize": 1.55,
    "ySize": 1.55,
    "PosOffset": {
      "x": 0.0,
      "y": 1.0,
      "z": 0.0
    }
  },
  "Lighting": {
    "LightIntensity": 0.54,
    "LightColor": {
      "r": 1.0,
      "g": 0.9804,
      "b": 0.8902
    },
    "AmbientIntensity": 1.3,
    "AmbientType": 0,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 1.0,
    "LutIndex": 0,
    "LutContribution": 1.0
  },
  "Hands": {
    "Enable": true,
    "DisableUnused": false,
    "Hiding": 0
  },
  "ComponentTags": {
    "labels": []
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "DecalPallet": [],
  "LuaScript": "--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]\n\n--[[ The onLoad event is called after the game save finishes loading. --]]\nfunction onLoad()\n    --[[ print('onLoad!') --]]\nend\n\n--[[ The onUpdate event is called once per frame. --]]\nfunction onUpdate()\n    --[[ print('onUpdate loop!') --]]\nend",
  "LuaScriptState": "",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->",
  "ObjectStates": [
    {
      "GUID": "c87ad1",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -15.1107731,
        "posY": 4.81034231,
        "posZ": -20.1076221,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 11.7719851,
        "scaleY": 9.174497,
        "scaleZ": 4.871238
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.856,
        "g": 0.09999997,
        "b": 0.09399996,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Red",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "9d27dc",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -30.2150211,
        "posY": 4.81034231,
        "posZ": 10.17524,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 11.6554289,
        "scaleY": 9.174497,
        "scaleZ": 4.91995144
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.171999961,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Yellow",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "7a641b",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 30.2511711,
        "posY": 4.81034231,
        "posZ": 9.59069252,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 11.6554213,
        "scaleY": 9.174497,
        "scaleZ": 4.91995144
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.627,
        "g": 0.124999978,
        "b": 0.941,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Purple",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "38e503",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 15.4749184,
        "posY": 4.81034231,
        "posZ": 19.8365288,
        "rotX": 0.0,
        "rotY": 179.8,
        "rotZ": 0.0,
        "scaleX": 11.7719746,
        "scaleY": 9.174497,
        "scaleZ": 4.87124
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.117999978,
        "g": 0.53,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Blue",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "e4fa7c",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 15.1961212,
        "posY": 4.81034231,
        "posZ": -20.1400986,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 11.7719707,
        "scaleY": 9.174499,
        "scaleZ": 4.871238
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "White",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "655788",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -15.1927719,
        "posY": 4.81034231,
        "posZ": 19.787817,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 11.7719707,
        "scaleY": 9.174497,
        "scaleZ": 4.871238
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.191999972,
        "g": 0.701,
        "b": 0.167999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Green",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "37fbad",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 30.1035728,
        "posY": 4.81034231,
        "posZ": -8.449126,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 11.6554184,
        "scaleY": 9.174497,
        "scaleZ": 4.91995144
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.96,
        "g": 0.438999981,
        "b": 0.807,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Pink",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "813026",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -30.247818,
        "posY": 4.81034231,
        "posZ": -8.822588,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 11.6554317,
        "scaleY": 9.174497,
        "scaleZ": 4.91995144
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.9559999,
        "g": 0.39199996,
        "b": 0.112999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Orange",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "eb2930",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -2.73560619,
        "posY": 1.16,
        "posZ": -9.330174,
        "rotX": -9.01011049E-07,
        "rotY": 180.01358,
        "rotZ": -1.18049151E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "[FFDA00]ANY[cccccc] MTG Booster Box v1.4[ffffff]",
      "Description": "\r\nSET: ???\r\n\r\n----------\r\nhttps://steamcommunity.com/sharedfiles/filedetails/?id=3558729769",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "fdce4f",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -13.9205189,
        "posY": 1.16,
        "posZ": 11.7176886,
        "rotX": 7.41590522E-09,
        "rotY": 180.01358,
        "rotZ": -6.093114E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Unglued Boosters (UGL)",
      "Description": "SET: UGL\nReleased: 1998-08-11",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "c3d6d8",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -10.9205189,
        "posY": 1.16,
        "posZ": 11.7176886,
        "rotX": -8.98839048E-08,
        "rotY": 180.01358,
        "rotZ": -1.331149E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Saviors of Kamigawa Boosters (SOK)",
      "Description": "SET: SOK\nReleased: 2005-06-03",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/ctFTHkw.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "ab1ca4",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -7.920518,
        "posY": 1.16,
        "posZ": 11.7176886,
        "rotX": 2.42637714E-08,
        "rotY": 180.01358,
        "rotZ": -6.99295057E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Modern Masters Boosters (MMA)",
      "Description": "SET: MMA\nReleased: 2013-06-07",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/CU7EL6h.png",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "dc222e",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -1.92051792,
        "posY": 1.16,
        "posZ": 11.7176886,
        "rotX": -1.67544627E-08,
        "rotY": 180.013565,
        "rotZ": 1.03996285E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Ultimate Masters Boosters (UMA)",
      "Description": "SET: UMA\nReleased: 2018-12-07",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/4RylXgU.png",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "36f188",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 1.07948208,
        "posY": 1.16,
        "posZ": 11.7176886,
        "rotX": -5.2409785E-08,
        "rotY": 180.013565,
        "rotZ": 5.72420724E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Mystery Booster Playtest Cards 2019 Boosters (CMB1)",
      "Description": "SET: CMB1\nReleased: 2019-11-07",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "25e771",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 4.079482,
        "posY": 1.16,
        "posZ": 11.7176886,
        "rotX": -7.633919E-08,
        "rotY": 180.01358,
        "rotZ": 1.09447683E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Double Masters Boosters (2XM)",
      "Description": "SET: 2XM\nReleased: 2020-08-07",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "e4686a",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 7.079482,
        "posY": 1.16,
        "posZ": 11.7176886,
        "rotX": -3.06995673E-08,
        "rotY": 180.01358,
        "rotZ": -1.45630821E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Kaldheim Boosters (KHM)",
      "Description": "SET: KHM\nReleased: 2021-02-05",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "1c71c2",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 10.0794811,
        "posY": 1.16,
        "posZ": 11.7176886,
        "rotX": 4.247664E-09,
        "rotY": 180.01358,
        "rotZ": -9.02680455E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "StrixHaven Boosters (STX)",
      "Description": "SET: STX\nReleased: 2021-04-23",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "51dc38",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 13.0794811,
        "posY": 1.16,
        "posZ": 11.7176886,
        "rotX": -4.362663E-08,
        "rotY": 180.01358,
        "rotZ": -1.09601523E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Adventures in the Forgotten Realms Boosters (AFR)",
      "Description": "SET: AFR\nReleased: 2021-07-23",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "97ce92",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -13.9205189,
        "posY": 1.16,
        "posZ": 6.71768951,
        "rotX": -4.73947637E-08,
        "rotY": 180.01358,
        "rotZ": 2.00483427E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Innistrad: Midnight Hunt Boosters (MID)",
      "Description": "SET: MID\nReleased: 2021-09-24",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "6db348",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -10.9205189,
        "posY": 1.16,
        "posZ": 6.71768951,
        "rotX": -1.47753624E-07,
        "rotY": 180.01358,
        "rotZ": 1.72146954E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Inistrad: Crimson Vow Boosters (VOW)",
      "Description": "SET: VOW\nReleased: 2021-11-19",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "5c3af5",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -7.920518,
        "posY": 1.16,
        "posZ": 6.71768951,
        "rotX": 9.826224E-08,
        "rotY": 180.01358,
        "rotZ": -9.416888E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Kamigawa: Neon Dynasty Boosters (NEO)",
      "Description": "SET: NEO\nReleased: 2022-02-18",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/5FcGpqC.png",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "9257b2",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -4.920518,
        "posY": 1.16,
        "posZ": 6.71768951,
        "rotX": -9.4123E-08,
        "rotY": 180.01358,
        "rotZ": 4.41579822E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Commander Masters Boosters (CMM)",
      "Description": "SET: CMM\nReleased: 2023-08-04",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "3d52c0",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -1.92051792,
        "posY": 1.16,
        "posZ": 6.71768951,
        "rotX": -2.97023519E-07,
        "rotY": 180.01358,
        "rotZ": 1.33040373E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Ixalan Boosters (XLN)",
      "Description": "SET: XLN\nReleased: 2023-11-17",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "163d88",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 1.0794822,
        "posY": 1.16,
        "posZ": 6.71768951,
        "rotX": 4.46657623E-07,
        "rotY": 180.01358,
        "rotZ": 2.22763589E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Ravnica Remastered Boosters (RVR)",
      "Description": "SET: RVR\nReleased: 2024-01-12",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "c9772f",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 4.079482,
        "posY": 1.16,
        "posZ": 6.71768951,
        "rotX": -6.45683045E-08,
        "rotY": 180.01358,
        "rotZ": -8.688812E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Murders at Karlov Manor Boosters (MKM)",
      "Description": "SET: MKM\nReleased: 2024-02-09",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "b288a6",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 7.079482,
        "posY": 1.16,
        "posZ": 6.71768951,
        "rotX": -5.32233635E-08,
        "rotY": 180.01358,
        "rotZ": -2.41715146E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Outlaws of Thunder Junction Boosters (OTJ)",
      "Description": "SET: OTJ\nReleased: 2024-04-19",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "b89188",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 10.0794811,
        "posY": 1.16,
        "posZ": 6.71768951,
        "rotX": -4.078594E-08,
        "rotY": 180.01358,
        "rotZ": 1.05655715E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Modern Horizons III Boosters (MH3)",
      "Description": "SET: MH3\nReleased: 2024-06-14",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "659b1f",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 13.0794811,
        "posY": 1.16,
        "posZ": 6.71768951,
        "rotX": 6.208315E-08,
        "rotY": 180.01358,
        "rotZ": 6.817799E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Bloomburrow Boosters (BLB)",
      "Description": "SET: BLB\nReleased: 2024-08-12",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "cb2044",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -13.9205189,
        "posY": 1.16,
        "posZ": 1.71768951,
        "rotX": 6.79223833E-09,
        "rotY": 180.01358,
        "rotZ": 1.5703435E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Duskmourn: House of Horror Boosters (DSK)",
      "Description": "SET: DSK\nReleased: 2024-09-27",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "c63e2f",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -10.9205189,
        "posY": 1.16,
        "posZ": 1.71768951,
        "rotX": -6.463158E-08,
        "rotY": 180.01358,
        "rotZ": 8.010788E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Champions of Kamigawa Boosters (CHK)",
      "Description": "SET: CHK\nReleased: 2024-10-01",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/E7IW8Tv.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "57553e",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -7.920518,
        "posY": 1.16,
        "posZ": 1.71768951,
        "rotX": 1.25091134E-07,
        "rotY": 180.01358,
        "rotZ": 1.03455864E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Foundations Boosters (FDN)",
      "Description": "SET: FDN\nReleased: 2024-11-15",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "68106f",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -4.920518,
        "posY": 1.16,
        "posZ": 1.71768951,
        "rotX": 9.307411E-08,
        "rotY": 180.01358,
        "rotZ": -2.10685684E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Unhinged Boosters (UNH)",
      "Description": "SET: UNH\nReleased: 2024-11-19",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "736f98",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -1.92051792,
        "posY": 1.16,
        "posZ": 1.71768951,
        "rotX": -6.137384E-08,
        "rotY": 180.01358,
        "rotZ": 2.02385891E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Innistrad Remaster Boosters (INR)",
      "Description": "SET: INR\nReleased: 2025-01-24",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "fd4987",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 1.07948208,
        "posY": 1.16,
        "posZ": 1.71768963,
        "rotX": -5.609051E-07,
        "rotY": 180.013565,
        "rotZ": -4.81551069E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Betrayers of Kamigawa Boosters (BOK)",
      "Description": "SET: BOK\nReleased: 2025-02-04",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "351692",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 4.079482,
        "posY": 1.16,
        "posZ": 1.71768951,
        "rotX": 4.15985468E-08,
        "rotY": 180.01358,
        "rotZ": -5.40106839E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Aetherdrift Boosters (DFT)",
      "Description": "SET: DFT\nReleased: 2025-02-14",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "7b48f9",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 7.079482,
        "posY": 1.16,
        "posZ": 1.71768951,
        "rotX": 1.61560337E-07,
        "rotY": 180.01358,
        "rotZ": -1.99252085E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Tarkir: Dragonstorm Boosters (TDM)",
      "Description": "SET: TDM\nReleased: 2025-04-11",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "b637d8",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 10.0794811,
        "posY": 1.16,
        "posZ": 1.71768951,
        "rotX": -1.02396037E-07,
        "rotY": 180.01358,
        "rotZ": 1.25944979E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Final Fantasy Boosters (FIN)",
      "Description": "SET: FIN\nReleased: 2025-06-13",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "20aae9",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 13.0794811,
        "posY": 1.16,
        "posZ": 1.71768951,
        "rotX": -9.499434E-08,
        "rotY": 180.01358,
        "rotZ": 1.5107112E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Edge of Eternities Boosters (EOE)",
      "Description": "SET: EOE\nReleased: 2025-08-01",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "6397ea",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -13.9205189,
        "posY": 1.16,
        "posZ": -3.28231049,
        "rotX": -7.801119E-09,
        "rotY": 180.01358,
        "rotZ": 7.811178E-09,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Marvel's Spider-Man Boosters (SPM)",
      "Description": "SET: SPM\nReleased: 2025-09-26",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "107d3a",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -10.9205189,
        "posY": 1.16,
        "posZ": -3.28231049,
        "rotX": -1.85619662E-08,
        "rotY": 180.01358,
        "rotZ": 6.583491E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Avatar: The Last Airbender Boosters (TLA)",
      "Description": "SET: TLA\nReleased: 2025-11-21",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "52b70a",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -4.920518,
        "posY": 1.16,
        "posZ": 11.7176886,
        "rotX": -2.52213042E-08,
        "rotY": 180.01358,
        "rotZ": -1.66471779E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Unstable Boosters (UST)",
      "Description": "SET: UST\nReleased: 2017-12-08",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(\r\n            function()\r\n                Wait.time(function()\r\n                    if container then\r\n                        container.destruct()\r\n                    end\r\n                end, 1)\r\n            end,\r\n            function()\r\n                return container and container.getQuantity() == 0\r\n            end\r\n    )\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName(),\r\n        click_function = 'noop',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.15  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImages = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    name = \"???\",\r\n    date = \"1900-01-01\",\r\n}\r\n\r\nlocal setImages = {\r\n    cmb1 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n    },\r\n    xln = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n    },\r\n    afr = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    uma = {\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    cmm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n    },\r\n    mma = {\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n    },\r\n    twoxm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        date = \"2020-08-07\",\r\n    },\r\n    sok = {\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n    },\r\n    neo = {\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    bok = {\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n    },\r\n    tla = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['???'] = 'empty',\r\n}\r\nlocal reverseSetCodeMapping = {}\r\nfor k, v in pairs(setCodeMapping) do\r\n    reverseSetCodeMapping[v] = k\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local setData = setImages[mappedSetCode]\r\n    if setData then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. setCode .. \"\\nReleased: \" .. setData.date)\r\n    else\r\n        leaveObject.setName(setCode .. \" Booster\")\r\n    end\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local urls = getSetUrls(setCode)\r\n    fetchDeckData(currentBoosterID, urls, leaveObject)\r\n\r\n    leaveObject.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = #setCode <= 3 and 130 or 100,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    leaveObject.createButton({\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local packImage = getPackImage(setCode)\r\n\r\n    leaveObject.setLuaScript(packLua)\r\n\r\n    leaveObject.setCustomObject({\r\n        diffuse = packImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    local packLuaScript = packLua\r\n                    if packImage == defaultImages.pack then\r\n                        packLuaScript = packLuaScript .. \"\\n\" .. packLabelLua\r\n                    end\r\n                    generatedBooster.setLuaScript(packLuaScript)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction getPackImage(setCode)\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            return packImage\r\n        elseif type(packImage) == \"table\" then\r\n            return packImage[math.random(1, #packImage)]\r\n        end\r\n    end\r\n\r\n    return defaultImages.pack\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local packImage = getPackImage(setCode)\r\n\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({\r\n            diffuse = packImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if packImage == defaultImages.pack then\r\n        self.createButton({\r\n            label = setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = #setCode <= 3 and 130 or 100,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\n\r\n    if getSetCode() == defaultImages.name then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local setCodes = {}\r\n    for setCode, data in pairs(setImages) do\r\n        table.insert(setCodes, { code = setCode, date = data.date or \"\" })\r\n    end\r\n\r\n    table.sort(setCodes, function(a, b)\r\n        if a.date == \"\" then\r\n            return false\r\n        end\r\n        if b.date == \"\" then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols = 10\r\n    local spacingX = 3\r\n    local spacingY = 5\r\n\r\n    for index, entry in ipairs(setCodes) do\r\n        local setCode = entry.code\r\n        local setData = setImages[setCode]\r\n\r\n        local row = math.floor((index - 1) / cols)\r\n        local col = (index - 1) % cols\r\n\r\n        local copy = self.clone({\r\n            position = {\r\n                x = startPos.x + col * spacingX,\r\n                y = startPos.y,\r\n                z = startPos.z - row * spacingY\r\n            },\r\n            snap_to_grid = false,\r\n        })\r\n\r\n        local lowerSetCode = string.lower(setCode)\r\n        local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n\r\n        if setData then\r\n            copy.setName(setData.name .. \" Boosters (\" .. string.upper(mappedSetCode) .. \")\")\r\n            copy.setDescription(\"SET: \" .. string.upper(mappedSetCode) .. \"\\nReleased: \" .. setData.date)\r\n        else\r\n            copy.setName(string.upper(mappedSetCode) .. \" Boosters\")\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or defaultImages.name\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nlocal BoosterPacks = {}\r\n\r\nfunction BoosterPacks.empty(set)\r\n    return {}\r\nend\r\n\r\nfunction BoosterPacks.default15Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    for i = 1, 5 do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default14Card(set)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    table.insert(urls, url .. 't:basic')\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'r:common+-t:basic')\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(urls, url .. getRandomRarity(big, 300, big))\r\n    table.insert(urls, url .. getRandomRarity(big, 30, 3))\r\n    table.insert(urls, url .. getRandomRarity(big, 3, 1))\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return urls\r\nend\r\n\r\nfunction BoosterPacks.default(set)\r\n    return BoosterPacks.default15Card(set)\r\nend\r\n\r\nfor _, s in ipairs({ 'mkm', 'otj', 'mh3', 'blb', 'dsk', 'chk', 'fdn', 'inr', 'bok', 'dft', 'tdm', 'fin', 'eoe', 'spm', 'tla' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return BoosterPacks.default14Card(set)\r\n    end\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\n\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\n\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\nfunction BoosterPacks.twoxm(set)\r\n    local urls = BoosterPacks.default(set)\r\n    urls[1] = urls[7]\r\n    urls[11] = urls[#urls]\r\n    for i = 9, 10 do\r\n        urls[i] = config.apiBaseURL .. 's:2xm+' .. getRandomRarity()\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createReplacementSlotPack(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#urls - 1, #urls)\r\n        for i, v in pairs(urls) do\r\n            if i == 7 or i == transformIndex then\r\n                urls[i] = v .. '+is:transform'\r\n            else\r\n                urls[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return urls\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local urls = BoosterPacks.default(set)\r\n        urls[7] = config.apiBaseURL .. 's:' .. set .. '+t:basic+t:snow'\r\n        return urls\r\n    end\r\nend\r\n\r\nBoosterPacks.cmb1 = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n        table.insert(urls, url .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urls, url .. 'c:m+r<rare')\r\n    table.insert(urls, url .. 'c:c+r<rare')\r\n    table.insert(urls, url .. 'r>=rare+frame:2015')\r\n    table.insert(urls, url .. 'r>=rare+-frame:2015')\r\n    table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n    return urls\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:stx+'\r\n    local archiveURL = config.apiBaseURL .. 's:sta+r>common+'\r\n    table.insert(urls, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(urls, url .. 't:lesson+-r:u')\r\n    table.insert(urls, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urls, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(urls, url)\r\n    else\r\n        table.insert(urls, url .. 'r:c')\r\n    end\r\n    return urls\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local urls = BoosterPacks.default(setQuery)\r\n        return packStructure(urls)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(urls)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(s:tafr+or+s:tstx+or+s:tkhm+or+s:tznr+or+s:sznr+or+s:tm21+or+s:tiko+or+s:tthb+or+s:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+s:plist+or+s:sta)'\r\n    table.insert(urls, url .. 't:basic')\r\n    table.insert(urls, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        urls[#urls - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        urls[#urls] = url .. artQuery\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    urls[6] = urls[math.random(11, 12)]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(urls)\r\n    table.insert(urls, urls[#urls]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    urls[11] = urls[12]\r\n    for i, _ in pairs(urls) do\r\n        local query = (i == 6 or i == #urls or i == #urls - 2) and '+is:transform' or '+-is:transform'\r\n        urls[i] = urls[i] .. query\r\n    end\r\n    return urls\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(urls)\r\n    local landQuery = 't:land'\r\n    table.insert(urls, urls[#urls])\r\n    for i = 7, 9 do\r\n        urls[i] = urls[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(urls) do\r\n        if i == 6 or i == #urls then\r\n            urls[i] = urls[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            urls[i] = urls[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return urls\r\nend)\r\n\r\nfunction enqueueRequest(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n\r\n    if position == \"start\" then\r\n        table.insert(requestQueue, 1, entry)\r\n    else\r\n        table.insert(requestQueue, entry)\r\n    end\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getSetUrls(setCode)\r\n    local lowerSetCode = string.lower(setCode)\r\n    local mappedSetCode = setCodeMapping[lowerSetCode] or lowerSetCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return reverseTable(packGenerator(lowerSetCode))\r\nend\r\n\r\nfunction reverseTable(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nfunction fetchDeckData(boosterID, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n\r\n    local setCode = getSetCode()\r\n\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                if leaveObject == null then\r\n                    return\r\n                end\r\n                local seen, dupes = {}, {}\r\n                for i, card in ipairs(deck.ContainedObjects) do\r\n                    if card then\r\n                        if seen[card.Nickname] then\r\n                            table.insert(dupes, i)\r\n                        else\r\n                            seen[card.Nickname] = true\r\n                        end\r\n                    end\r\n                end\r\n\r\n                if #dupes > 0 then\r\n                    local dupeUrls = {}\r\n                    for _, i in ipairs(dupes) do\r\n                        table.insert(dupeUrls, originalUrls[i])\r\n                    end\r\n\r\n                    Wait.time(function()\r\n                        fetchDeckData(boosterID, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n                    end, 0.1)\r\n                else\r\n                    local boosterContents = {}\r\n                    print(setCode .. \"==\" .. defaultImages.name)\r\n                    if setCode == defaultImages.name then\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n                            Description = \"\\nAlmost all sets are supported, see:\\nhttps://scryfall.com/sets\\n\\nCustom pack images are available for:\\n\" .. getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    for _, error in ipairs(requestErrors) do\r\n                        table.insert(boosterContents, {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"Booster Generation Error\",\r\n                            Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        })\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n\r\n    for setCode, data in pairs(setImages) do\r\n        if data.pack then\r\n            local lowerSetCode = string.lower(setCode)\r\n            local mappedSetCode = reverseSetCodeMapping[lowerSetCode] or lowerSetCode\r\n            table.insert(packs, string.upper(mappedSetCode))\r\n        end\r\n    end\r\n\r\n    return table.concat(packs, \", \")\r\nend\r\n\r\nfunction noop()\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "cadac8",
      "Name": "Notecard",
      "Transform": {
        "posX": 3.14152217,
        "posY": 1.03,
        "posZ": -9.369841,
        "rotX": 6.410158E-08,
        "rotY": 3.19573246E-06,
        "rotZ": -7.11007544E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "REPLACE \"SET: ???\" IN BOX DESCRIPTION",
      "Description": "\nAlmost all sets are supported, see:\nhttps://scryfall.com/sets\n\nCustom pack images are available for:\nCMB1, FIN, INR, DFT, EOE, TDM, FDN, DSK, BLB, MH3, MKM, OTJ, RVR, XLN, KHM, MID, STX, AFR, UST, UGL, UNH, VOW, UMA, CMM, MMA, 2XM, SOK, NEO, BOK, CHK, SPM, TLA",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    }
  ]
}