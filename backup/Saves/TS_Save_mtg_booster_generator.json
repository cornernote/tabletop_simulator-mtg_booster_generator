{
  "SaveName": "MTG Booster Generator",
  "EpochTime": 1757943533,
  "Date": "9/15/2025 11:08:53 PM",
  "VersionNumber": "v13.3",
  "GameMode": "DND Measurement Injector",
  "GameType": "Utility",
  "GameComplexity": "Low Complexity",
  "PlayingTime": [
    0,
    0
  ],
  "PlayerCounts": [
    0,
    0
  ],
  "Tags": [
    "Components"
  ],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "Table_RPG",
  "Sky": "Sky_Tunnel",
  "Note": "",
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "1": {
      "title": "White",
      "body": "",
      "color": "White",
      "visibleColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "id": 1
    },
    "2": {
      "title": "Brown",
      "body": "",
      "color": "Brown",
      "visibleColor": {
        "r": 0.443,
        "g": 0.231,
        "b": 0.09
      },
      "id": 2
    },
    "3": {
      "title": "Red",
      "body": "",
      "color": "Red",
      "visibleColor": {
        "r": 0.856,
        "g": 0.1,
        "b": 0.094
      },
      "id": 3
    },
    "4": {
      "title": "Orange",
      "body": "",
      "color": "Orange",
      "visibleColor": {
        "r": 0.956,
        "g": 0.392,
        "b": 0.113
      },
      "id": 4
    },
    "5": {
      "title": "Yellow",
      "body": "",
      "color": "Yellow",
      "visibleColor": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.172
      },
      "id": 5
    },
    "6": {
      "title": "Green",
      "body": "",
      "color": "Green",
      "visibleColor": {
        "r": 0.192,
        "g": 0.701,
        "b": 0.168
      },
      "id": 6
    },
    "7": {
      "title": "Blue",
      "body": "",
      "color": "Blue",
      "visibleColor": {
        "r": 0.118,
        "g": 0.53,
        "b": 1.0
      },
      "id": 7
    },
    "8": {
      "title": "Teal",
      "body": "",
      "color": "Teal",
      "visibleColor": {
        "r": 0.129,
        "g": 0.694,
        "b": 0.607
      },
      "id": 8
    },
    "9": {
      "title": "Purple",
      "body": "",
      "color": "Purple",
      "visibleColor": {
        "r": 0.627,
        "g": 0.125,
        "b": 0.941
      },
      "id": 9
    },
    "10": {
      "title": "Pink",
      "body": "",
      "color": "Pink",
      "visibleColor": {
        "r": 0.96,
        "g": 0.439,
        "b": 0.807
      },
      "id": 10
    },
    "11": {
      "title": "Black",
      "body": "",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 11
    }
  },
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": false,
    "Offset": true,
    "BothSnapping": false,
    "xSize": 1.55,
    "ySize": 1.55,
    "PosOffset": {
      "x": 0.0,
      "y": 1.0,
      "z": 0.0
    }
  },
  "Lighting": {
    "LightIntensity": 0.54,
    "LightColor": {
      "r": 1.0,
      "g": 0.9804,
      "b": 0.8902
    },
    "AmbientIntensity": 1.3,
    "AmbientType": 0,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 1.0,
    "LutIndex": 0,
    "LutContribution": 1.0
  },
  "Hands": {
    "Enable": true,
    "DisableUnused": false,
    "Hiding": 0
  },
  "ComponentTags": {
    "labels": []
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "DecalPallet": [],
  "LuaScript": "--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]\n\n--[[ The onLoad event is called after the game save finishes loading. --]]\nfunction onLoad()\n    --[[ print('onLoad!') --]]\nend\n\n--[[ The onUpdate event is called once per frame. --]]\nfunction onUpdate()\n    --[[ print('onUpdate loop!') --]]\nend",
  "LuaScriptState": "",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->",
  "ObjectStates": [
    {
      "GUID": "c87ad1",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -15.1107731,
        "posY": 4.81034231,
        "posZ": -20.1076221,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 11.7719851,
        "scaleY": 9.174497,
        "scaleZ": 4.871238
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.856,
        "g": 0.09999997,
        "b": 0.09399996,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Red",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "9d27dc",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -30.2150211,
        "posY": 4.81034231,
        "posZ": 10.17524,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 11.6554289,
        "scaleY": 9.174497,
        "scaleZ": 4.91995144
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.171999961,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Yellow",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "7a641b",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 30.2511711,
        "posY": 4.81034231,
        "posZ": 9.59069252,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 11.6554213,
        "scaleY": 9.174497,
        "scaleZ": 4.91995144
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.627,
        "g": 0.124999978,
        "b": 0.941,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Purple",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "38e503",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 15.4749184,
        "posY": 4.81034231,
        "posZ": 19.8365288,
        "rotX": 0.0,
        "rotY": 179.8,
        "rotZ": 0.0,
        "scaleX": 11.7719746,
        "scaleY": 9.174497,
        "scaleZ": 4.87124
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.117999978,
        "g": 0.53,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Blue",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "e4fa7c",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 15.1961212,
        "posY": 4.81034231,
        "posZ": -20.1400986,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 11.7719707,
        "scaleY": 9.174499,
        "scaleZ": 4.871238
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "White",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "655788",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -15.1927719,
        "posY": 4.81034231,
        "posZ": 19.787817,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 11.7719707,
        "scaleY": 9.174497,
        "scaleZ": 4.871238
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.191999972,
        "g": 0.701,
        "b": 0.167999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Green",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "37fbad",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 30.1035728,
        "posY": 4.81034231,
        "posZ": -8.449126,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 11.6554184,
        "scaleY": 9.174497,
        "scaleZ": 4.91995144
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.96,
        "g": 0.438999981,
        "b": 0.807,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Pink",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "813026",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -30.247818,
        "posY": 4.81034231,
        "posZ": -8.822588,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 11.6554317,
        "scaleY": 9.174497,
        "scaleZ": 4.91995144
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 0.9559999,
        "g": 0.39199996,
        "b": 0.112999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Orange",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "eb2930",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -1.2269634,
        "posY": 1.16,
        "posZ": -10.42075,
        "rotX": 1.08913227E-07,
        "rotY": 180.01442,
        "rotZ": -5.30722559E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "[FFDA00]ANY[cccccc] MTG Booster Box v1.4[ffffff]",
      "Description": "\r\nSET: ???\n\r\n----------\r\nhttps://steamcommunity.com/sharedfiles/filedetails/?id=3558729769",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "b27989",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -14.0223761,
        "posY": 1.16,
        "posZ": 10.0258808,
        "rotX": -7.019515E-08,
        "rotY": 180.01442,
        "rotZ": 7.798647E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Unglued Booster (UGL)",
      "Description": "SET: UGL\nReleased: 1998-08-11",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "b703ef",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -11.0223761,
        "posY": 1.16,
        "posZ": 10.0258808,
        "rotX": -8.32826643E-08,
        "rotY": 180.01442,
        "rotZ": 2.849496E-09,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Saviors of Kamigawa Booster (SOK)",
      "Description": "SET: SOK\nReleased: 2005-06-03",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/ctFTHkw.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "8e0089",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -8.022376,
        "posY": 1.16,
        "posZ": 10.0258808,
        "rotX": -1.101637E-09,
        "rotY": 180.01442,
        "rotZ": -7.565294E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Modern Masters Booster (MMA)",
      "Description": "SET: MMA\nReleased: 2013-06-07",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/CU7EL6h.png",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "22f051",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -2.02237535,
        "posY": 1.16,
        "posZ": 10.0258808,
        "rotX": -4.45198234E-09,
        "rotY": 180.01442,
        "rotZ": -2.10476088E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Ultimate Masters Booster (UMA)",
      "Description": "SET: UMA\nReleased: 2018-12-07",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/4RylXgU.png",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "18eee3",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 0.9776249,
        "posY": 1.16,
        "posZ": 10.0258808,
        "rotX": -7.73348631E-07,
        "rotY": 180.01442,
        "rotZ": 7.101495E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Mystery Booster Playtest Cards 2019 Booster (CMB1)",
      "Description": "SET: CMB1\nReleased: 2019-11-07",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "c64f82",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -5.02237558,
        "posY": 1.16,
        "posZ": 10.0258808,
        "rotX": 1.1293193E-08,
        "rotY": 180.01442,
        "rotZ": -2.47997349E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Unstable Booster (UST)",
      "Description": "SET: UST\nReleased: 2017-12-08",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "159243",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 3.97762465,
        "posY": 1.16,
        "posZ": 10.0258808,
        "rotX": -3.76258356E-07,
        "rotY": 180.01442,
        "rotZ": 6.829315E-09,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Double Masters Booster (2XM)",
      "Description": "SET: 2XM\nReleased: 2020-08-07",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "f66f3c",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 6.97762442,
        "posY": 1.16,
        "posZ": 10.0258808,
        "rotX": 1.037773E-08,
        "rotY": 180.01442,
        "rotZ": 1.90118126E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Kaldheim Booster (KHM)",
      "Description": "SET: KHM\nReleased: 2021-02-05",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "048ef3",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 9.977624,
        "posY": 1.16,
        "posZ": 10.0258808,
        "rotX": -7.462875E-08,
        "rotY": 180.01442,
        "rotZ": -1.50137E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "StrixHaven Booster (STX)",
      "Description": "SET: STX\nReleased: 2021-04-23",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "f6dbf5",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 12.9776239,
        "posY": 1.16,
        "posZ": 10.0258808,
        "rotX": -9.09105E-08,
        "rotY": 180.01442,
        "rotZ": -1.40572027E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Adventures in the Forgotten Realms Booster (AFR)",
      "Description": "SET: AFR\nReleased: 2021-07-23",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "735d6f",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -14.0223761,
        "posY": 1.16,
        "posZ": 5.025882,
        "rotX": 1.6496034E-07,
        "rotY": 180.0144,
        "rotZ": 1.85127078E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Innistrad: Midnight Hunt Booster (MID)",
      "Description": "SET: MID\nReleased: 2021-09-24",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "388812",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -11.0223761,
        "posY": 1.16,
        "posZ": 5.025882,
        "rotX": 1.47338511E-07,
        "rotY": 180.0144,
        "rotZ": -1.90263222E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Inistrad: Crimson Vow Booster (VOW)",
      "Description": "SET: VOW\nReleased: 2021-11-19",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "53a9d2",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -8.022376,
        "posY": 1.16,
        "posZ": 5.025882,
        "rotX": 6.58119461E-08,
        "rotY": 180.01442,
        "rotZ": -1.8481142E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Kamigawa: Neon Dynasty Booster (NEO)",
      "Description": "SET: NEO\nReleased: 2022-02-18",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/5FcGpqC.png",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "b1f42e",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -5.02237558,
        "posY": 1.16,
        "posZ": 5.025882,
        "rotX": -1.71357442E-07,
        "rotY": 180.01442,
        "rotZ": 9.903429E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Commander Masters Booster (CMM)",
      "Description": "SET: CMM\nReleased: 2023-08-04",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "33e350",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -2.02237535,
        "posY": 1.16,
        "posZ": 5.025882,
        "rotX": 7.625708E-07,
        "rotY": 180.01442,
        "rotZ": 1.05024455E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Ixalan Booster (XLN)",
      "Description": "SET: XLN\nReleased: 2023-11-17",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "1270ab",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 0.9776249,
        "posY": 1.16,
        "posZ": 5.025882,
        "rotX": 2.200936E-07,
        "rotY": 180.01442,
        "rotZ": -4.097786E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Ravnica Remastered Booster (RVR)",
      "Description": "SET: RVR\nReleased: 2024-01-12",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "935a71",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 3.977625,
        "posY": 1.16,
        "posZ": 5.025882,
        "rotX": -2.35946018E-08,
        "rotY": 180.01442,
        "rotZ": -9.45856868E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Murders at Karlov Manor Booster (MKM)",
      "Description": "SET: MKM\nReleased: 2024-02-09",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "e193de",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 6.97762442,
        "posY": 1.16,
        "posZ": 5.025882,
        "rotX": -3.78296363E-08,
        "rotY": 180.0144,
        "rotZ": -7.27216161E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Outlaws of Thunder Junction Booster (OTJ)",
      "Description": "SET: OTJ\nReleased: 2024-04-19",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "129b11",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 9.977624,
        "posY": 1.16,
        "posZ": 5.025882,
        "rotX": -1.00432578E-06,
        "rotY": 180.0144,
        "rotZ": 1.44607339E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Modern Horizons III Booster (MH3)",
      "Description": "SET: MH3\nReleased: 2024-06-14",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "8e7708",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 12.9776239,
        "posY": 1.16,
        "posZ": 5.025882,
        "rotX": -5.12617248E-07,
        "rotY": 180.0144,
        "rotZ": -3.29481026E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Bloomburrow Booster (BLB)",
      "Description": "SET: BLB\nReleased: 2024-08-12",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "8abc1c",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -14.0223761,
        "posY": 1.16,
        "posZ": 0.0258817635,
        "rotX": -6.399632E-07,
        "rotY": 180.0144,
        "rotZ": -1.22614566E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Duskmourn: House of Horror Booster (DSK)",
      "Description": "SET: DSK\nReleased: 2024-09-27",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "b16d76",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -11.0223761,
        "posY": 1.16,
        "posZ": 0.0258817654,
        "rotX": -8.122315E-07,
        "rotY": 180.0144,
        "rotZ": 9.603316E-09,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Champions of Kamigawa Booster (CHK)",
      "Description": "SET: CHK\nReleased: 2024-10-01",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/E7IW8Tv.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "d80832",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -8.022376,
        "posY": 1.16,
        "posZ": 0.0258819479,
        "rotX": -3.61583474E-08,
        "rotY": 180.01442,
        "rotZ": -1.4595654E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Foundations Booster (FDN)",
      "Description": "SET: FDN\nReleased: 2024-11-15",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "49d700",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -5.02237558,
        "posY": 1.16,
        "posZ": 0.0258820914,
        "rotX": 1.293769E-07,
        "rotY": 180.01442,
        "rotZ": -1.41540838E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Unhinged Booster (UNH)",
      "Description": "SET: UNH\nReleased: 2024-11-19",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "e8e7fd",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -2.022375,
        "posY": 1.16,
        "posZ": 0.0258818083,
        "rotX": 1.39888783E-07,
        "rotY": 180.01442,
        "rotZ": 1.07521225E-06,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Innistrad Remaster Booster (INR)",
      "Description": "SET: INR\nReleased: 2025-01-24",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "ec4d26",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 0.977624953,
        "posY": 1.16,
        "posZ": 0.0258819,
        "rotX": 1.03994871E-07,
        "rotY": 180.01442,
        "rotZ": -1.745594E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Betrayers of Kamigawa Booster (BOK)",
      "Description": "SET: BOK\nReleased: 2025-02-04",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://i.imgur.com/t6UP7lt.jpg",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "f15b22",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 3.977625,
        "posY": 1.16,
        "posZ": 0.025881825,
        "rotX": 7.351427E-07,
        "rotY": 180.01442,
        "rotZ": -5.35150036E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Aetherdrift Booster (DFT)",
      "Description": "SET: DFT\nReleased: 2025-02-14",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "a2a559",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 6.97762442,
        "posY": 1.16,
        "posZ": 0.02588184,
        "rotX": -3.30994823E-07,
        "rotY": 180.01442,
        "rotZ": -1.13229646E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Tarkir: Dragonstorm Booster (TDM)",
      "Description": "SET: TDM\nReleased: 2025-04-11",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "f088e7",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 9.977624,
        "posY": 1.16,
        "posZ": 0.025881758,
        "rotX": 4.966345E-07,
        "rotY": 180.0144,
        "rotZ": -2.66045475E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Final Fantasy Booster (FIN)",
      "Description": "SET: FIN\nReleased: 2025-06-13",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "159f22",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": 12.9776239,
        "posY": 1.16,
        "posZ": 0.0258817635,
        "rotX": -1.00309671E-06,
        "rotY": 180.0144,
        "rotZ": -1.67452143E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Edge of Eternities Booster (EOE)",
      "Description": "SET: EOE\nReleased: 2025-08-01",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "75022e",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -14.0223761,
        "posY": 1.16,
        "posZ": -4.974118,
        "rotX": 1.07739559E-07,
        "rotY": 180.0144,
        "rotZ": -3.59985762E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Marvel's Spider-Man Booster (SPM)",
      "Description": "SET: SPM\nReleased: 2025-09-26",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "a4d6f8",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -11.0223761,
        "posY": 1.16,
        "posZ": -4.974118,
        "rotX": 1.54457254E-07,
        "rotY": 180.0144,
        "rotZ": 5.714386E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "Avatar: The Last Airbender Booster (TLA)",
      "Description": "SET: TLA\nReleased: 2025-11-21",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q=',\r\n    defaultPackImage = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\", -- same url used in packLua\r\n    defaultSetCode = \"???\", -- same setCode used in packLua\r\n    pollInterval = 0.2,\r\n}\r\n\r\nlocal data = {\r\n    setCode = \"???\",\r\n    boosterCount = 0,\r\n    timePassed = 0,\r\n    lastDescription = \"\",\r\n    requestQueue = {},\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nlocal defaultSetCode = \"???\"\r\nlocal defaultPack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\"\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.condition(function()\r\n        Wait.time(function()\r\n            if container then\r\n                container.destruct()\r\n            end\r\n        end, 1)\r\n    end, function()\r\n        return container and container.getQuantity() == 0\r\n    end)\r\nend\r\nfunction onLoad()\r\n    local setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or self.getName():match(\"^(.-)%s+Booster$\")\r\n    if self.getCustomObject().diffuse == defaultPack then\r\n        self.createButton({\r\n            label = setCode and (setCode .. \" Booster\") or self.getName(),\r\n            click_function = 'noop',\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\n    if setCode ~= defaultSetCode and #self.getObjects() > 0 then\r\n        self.createButton({\r\n            label = \"Unpack\",\r\n            click_function = \"unpackDeck\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, 0 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 600,\r\n            height = 200,\r\n            font_size = 150,\r\n            color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 },\r\n        })\r\n    end\r\nend\r\nfunction unpackDeck()\r\n    local contained = self.getObjects()\r\n    if #contained == 0 then\r\n        return\r\n    end\r\n    local entryGuid = contained[1].guid\r\n    local takePos = self.getPosition() + Vector(0, 6, 0)\r\n    local deck = self.takeObject({ guid = entryGuid, position = takePos, smooth = true })\r\n    if not deck then\r\n        return\r\n    end\r\n    deck.setLock(true)\r\n    deck.setScale({ 2, 1, 2 })\r\n    Wait.time(function()\r\n        spreadDeck(deck)\r\n    end, 0.1)\r\nend\r\nfunction spreadDeck(deck)\r\n    if not deck then\r\n        return\r\n    end\r\n    local startPos = self.getPosition() + Vector(-2.3 * 2, 2, 3.2)\r\n    local colCount = 5\r\n    local spacingX = 2.3\r\n    local spacingZ = 3.2\r\n    local total = 1\r\n    if deck.tag == \"Deck\" then\r\n        total = deck.getQuantity()\r\n    end\r\n    for index = 1, total do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / colCount)\r\n            local col = (index - 1) % colCount\r\n            local pos = startPos + Vector(col * spacingX, 2, -row * spacingZ)\r\n            if deck.tag == \"Deck\" then\r\n                local card = deck.takeObject({ position = pos, smooth = true })\r\n                Wait.time(function()\r\n                    card.setScale({ 1, 1, 1 })\r\n                end, 0.05)\r\n                if deck.remainder then\r\n                    deck = deck.remainder\r\n                    deck.setLock(true)\r\n                end\r\n            else\r\n                deck.setScale({ 1, 1, 1 })\r\n                deck.setLock(false)\r\n                deck.setPositionSmooth(pos, false, false)\r\n            end\r\n        end, index * 0.8)\r\n    end\r\n    self.destruct()\r\nend\r\nfunction noop()\r\nend\r\n]]\r\n\r\n-----------------------------------------------------------------------\r\n-- BoosterUrls - builds URL lists for each set type\r\n-----------------------------------------------------------------------\r\n\r\nBoosterUrls = { }\r\n\r\nBoosterUrls.randomRarity = function(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:m'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:r'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:u'\r\n    else\r\n        return 'r:c'\r\n    end\r\nend\r\n\r\nBoosterUrls.chooseMasterpieceReplacement = function(set, urls)\r\n    local masterpieceSets = {\r\n        bfz = 'exp',\r\n        ogw = 'exp',\r\n        kld = 'mps',\r\n        aer = 'mps',\r\n        akh = 'mp2',\r\n        hou = 'mp2',\r\n        stx = 'sta',\r\n        tsp = 'tsb',\r\n        mb1 = 'fmb1',\r\n        mh2 = 'h1r',\r\n    }\r\n    if masterpieceSets[set] and math.random(1, 144) == 1 then\r\n        urls[#urls] = config.apiBaseURL .. 's:' .. masterpieceSets[set]\r\n    end\r\nend\r\n\r\nBoosterUrls.basePackUrls = function(set, includeBasics, extraCommons)\r\n    local urls = {}\r\n    local url = config.apiBaseURL .. 's:' .. set .. '+'\r\n    if includeBasics then\r\n        table.insert(urls, url .. 't:basic')\r\n    else\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(urls, url .. 'r:common+-t:basic+c>=' .. c)\r\n    end\r\n    extraCommons = extraCommons or 5\r\n    for i = 1, extraCommons do\r\n        table.insert(urls, url .. 'r:common+-t:basic')\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default14CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 1)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8000, 300, 36))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default15CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 5)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default16CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, true, 3)\r\n    print(#urls)\r\n    for i = 1, 3 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    print(#urls)\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    print(#urls)\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    print(#urls)\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.default20CardPack = function(set)\r\n    local urls = BoosterUrls.basePackUrls(set, false, 5)\r\n    for i = 1, 5 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. 'r:u')\r\n    end\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(800, 30, 3))\r\n    table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(80, 3, 1))\r\n    for i = 1, 2 do\r\n        table.insert(urls, config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrls.randomRarity(8, 1))\r\n    end\r\n    BoosterUrls.chooseMasterpieceReplacement(set, urls)\r\n    return urls\r\nend\r\n\r\nBoosterUrls.addCardTypeToPack = function(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nBoosterUrls.createReplacementSlotPack = function(urls, set, removeQuery, addQuery)\r\n    for i, v in pairs(urls) do\r\n        if i ~= 7 then\r\n            urls[i] = v .. removeQuery\r\n        else\r\n            urls[i] = config.apiBaseURL .. 's:' .. set .. '+' .. BoosterUrlsBoosterUrls.randomRarity() .. addQuery\r\n        end\r\n    end\r\n    return urls\r\nend\r\n\r\nBoosterUrls.swapLandForCommon = function(urls)\r\n    urls[1] = urls[7]\r\n    return urls\r\nend\r\n\r\nBoosterUrls.reverseTable = function(t)\r\n    local rev = {}\r\n    for i = #t, 1, -1 do\r\n        table.insert(rev, t[i])\r\n    end\r\n    return rev\r\nend\r\n\r\nBoosterUrls.getSetUrls = function(setCode)\r\n    local entry = setDefinitions[setCode]\r\n    if entry and entry.getUrls ~= null then\r\n        return BoosterUrls.reverseTable(entry.getUrls(setCode))\r\n    end\r\n    return BoosterUrls.reverseTable(BoosterUrls.default15CardPack(setCode))\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- PackBuilder - fetches card info and builds a booster pack\r\n-----------------------------------------------------------------------\r\n\r\nPackBuilder = {}\r\n\r\nPackBuilder.cache = {}\r\n\r\nPackBuilder.enqueueRequest = function(url, callback, position)\r\n    local entry = { url = url, callback = callback }\r\n    if position == \"start\" then\r\n        table.insert(data.requestQueue, 1, entry)\r\n    else\r\n        table.insert(data.requestQueue, entry)\r\n    end\r\nend\r\n\r\nPackBuilder.processRequestQueue = function()\r\n    if #data.requestQueue == 0 then\r\n        return\r\n    end\r\n    local request = table.remove(data.requestQueue, 1)\r\n    WebRequest.get(request.url, request.callback)\r\nend\r\n\r\nPackBuilder.fetchDeckData = function(boosterID, setCode, urls, leaveObject, attempts, existingDeck, replaceIndices, originalUrls)\r\n    attempts = attempts or 0\r\n    originalUrls = originalUrls or urls\r\n    local deck = existingDeck or {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urls\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for j, url in ipairs(urls) do\r\n        local i = replaceIndices and replaceIndices[j] or j\r\n        PackBuilder.enqueueRequest(url, function(request)\r\n            if request.response_code == 200 then\r\n                local cardData = PackBuilder.createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            else\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n            local remaining = requestsPending - requestsCompleted\r\n            local label = \"remaining: \" .. (remaining + 1)\r\n            if attempts > 0 then\r\n                label = \"deduping: \" .. (attempts + 1) .. \": \" .. (remaining + 1)\r\n            end\r\n            if leaveObject then\r\n                leaveObject.editButton({ index = 1, label = label })\r\n            end\r\n        end, existingDeck and \"start\" or \"end\")\r\n    end\r\n\r\n    Wait.condition(function()\r\n        if leaveObject == null then\r\n            return\r\n        end\r\n        local seen, dupes = {}, {}\r\n        for i, card in ipairs(deck.ContainedObjects) do\r\n            if card then\r\n                if seen[card.Nickname] then\r\n                    table.insert(dupes, i)\r\n                else\r\n                    seen[card.Nickname] = true\r\n                end\r\n            end\r\n        end\r\n        if #dupes > 0 then\r\n            local dupeUrls = {}\r\n            for _, i in ipairs(dupes) do\r\n                table.insert(dupeUrls, originalUrls[i])\r\n            end\r\n            Wait.time(function()\r\n                PackBuilder.fetchDeckData(boosterID, setCode, dupeUrls, leaveObject, attempts + 1, deck, dupes, originalUrls)\r\n            end, 0.1)\r\n        else\r\n            local boosterContents = {}\r\n            if setCode == config.defaultSetCode then\r\n                table.insert(boosterContents, PackBuilder.generateInstructionNotecard())\r\n            else\r\n                table.insert(boosterContents, deck)\r\n            end\r\n\r\n            for _, error in ipairs(requestErrors) do\r\n                table.insert(boosterContents, PackBuilder.generateErrorNotecard(error))\r\n            end\r\n\r\n            PackBuilder.cache[boosterID] = boosterContents\r\n        end\r\n    end, function()\r\n        return requestsPending == requestsCompleted\r\n    end)\r\nend\r\n\r\nPackBuilder.generateErrorNotecard = function(error)\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Notecard\",\r\n        Nickname = \"Booster Generation Error\",\r\n        Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.generateInstructionNotecard = function()\r\n    local setsWithPackImages = {}\r\n    for code, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(setsWithPackImages, code)\r\n        end\r\n    end\r\n    return {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1, },\r\n        Name = \"Notecard\",\r\n        Nickname = 'REPLACE \"SET: ???\" IN BOX DESCRIPTION',\r\n        Description = \"\\nAlmost all sets are supported, see:\"\r\n                .. \"\\nhttps://scryfall.com/sets\"\r\n                .. \"\\n\"\r\n                .. \"\\nCustom pack images are available for:\"\r\n                .. \"\\n\" .. table.concat(setsWithPackImages, \", \"),\r\n        Grid = false, Snap = false\r\n    }\r\nend\r\n\r\nPackBuilder.createCardDataFromJSON = function(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName, cardOracle, faceURL, backData\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            cardName = PackBuilder.formattedName(card.card_faces[1])\r\n            cardOracle = \"\"\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. PackBuilder.formattedName(face) .. '\\n' .. PackBuilder.getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            local face, back = card.card_faces[1], card.card_faces[2]\r\n            cardName = PackBuilder.formattedName(face, 'DFC')\r\n            cardOracle = PackBuilder.getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = PackBuilder.formattedName(back, 'DFC'),\r\n                Description = PackBuilder.getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                }\r\n            }\r\n        end\r\n    else\r\n        cardName = PackBuilder.formattedName(card)\r\n        cardOracle = PackBuilder.getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        }\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n    return cardData\r\nend\r\n\r\nPackBuilder.formattedName = function(face, typeSuffix)\r\n    return string.format(\r\n            '%s\\n%s %s CMC %s',\r\n            face.name:gsub('\"', ''),\r\n            face.type_line,\r\n            tostring(face.cmc or 0),\r\n            typeSuffix or \"\"\r\n    )            :gsub('%s$', '')\r\nend\r\n\r\nPackBuilder.getCardOracleText = function(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nPackBuilder.getRandomPackImage = function(setCode)\r\n    local packImage = setDefinitions[setCode] and setDefinitions[setCode].packImage or config.defaultPackImage\r\n    if type(packImage) == \"table\" then\r\n        packImage = packImage[math.random(1, #packImage)]\r\n    end\r\n    return packImage\r\nend\r\n\r\n-----------------------------------------------------------------------\r\n-- SetDefinitions - defines the booster set name, contents, etc\r\n-----------------------------------------------------------------------\r\n\r\nsetDefinitions = {\r\n    CMB1 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        name = \"Mystery Booster Playtest Cards 2019\",\r\n        date = \"2019-11-07\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:mb1+' -- seems to load s:plst (The List)\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n                table.insert(urls, url .. 'r<r+c=' .. c)\r\n            end\r\n            table.insert(urls, url .. 'c:m+r<r')\r\n            table.insert(urls, url .. 'c:c+r<r')\r\n            table.insert(urls, url .. 'r>=r+frame:2015')\r\n            table.insert(urls, url .. 'r>=r+-frame:2015')\r\n            table.insert(urls, config.apiBaseURL .. 's:cmb1')\r\n            return urls\r\n        end,\r\n    },\r\n    FIN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        name = \"Final Fantasy\",\r\n        date = \"2025-06-13\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    INR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        name = \"Innistrad Remaster\",\r\n        date = \"2025-01-24\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DFT = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        name = \"Aetherdrift\",\r\n        date = \"2025-02-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    EOE = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        name = \"Edge of Eternities\",\r\n        date = \"2025-08-01\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TDM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        name = \"Tarkir: Dragonstorm\",\r\n        date = \"2025-04-11\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    FDN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        name = \"Foundations\",\r\n        date = \"2024-11-15\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DSK = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n        date = \"2024-09-27\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    BLB = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        name = \"Bloomburrow\",\r\n        date = \"2024-08-12\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MH3 = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        name = \"Modern Horizons III\",\r\n        date = \"2024-06-14\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    MKM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        name = \"Murders at Karlov Manor\",\r\n        date = \"2024-02-09\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    OTJ = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n        date = \"2024-04-19\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    RVR = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        name = \"Ravnica Remastered\",\r\n        date = \"2024-01-12\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default14CardPack(set))\r\n        end,\r\n    },\r\n    XLN = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n        date = \"2023-11-17\",\r\n    },\r\n    MID = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n        date = \"2021-09-24\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.default15CardPack(set)\r\n            local transformIndex = math.random(#urls - 1, #urls)\r\n            for i, v in pairs(urls) do\r\n                local add = (i == 7 or (i == transformIndex))\r\n                urls[i] = v .. (add and '+is:transform' or '+-is:transform')\r\n            end\r\n            return urls\r\n        end,\r\n    },\r\n    STX = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n        date = \"2021-04-23\",\r\n        getUrls = function(set)\r\n            local urls = {}\r\n            local url = config.apiBaseURL .. 's:stx+'\r\n            local archiveURL = config.apiBaseURL .. 's:sta+'\r\n            table.insert(urls, url .. 't:land')\r\n            for c in ('wubrg'):gmatch('.') do\r\n                table.insert(urls, url .. '-t:basic+r<r+c:' .. c)\r\n            end\r\n            table.insert(urls, url .. '-t:basic+r<r')\r\n            table.insert(urls, config.apiBaseURL .. '(s:sta+or+s:sta)+-t:basic')\r\n            table.insert(urls, url .. '-t:basic')\r\n            table.insert(urls, url .. BoosterUrls.randomRarity(8, 1))\r\n            table.insert(urls, url .. 't:lesson')\r\n            table.insert(urls, archiveURL .. 'r>c+' .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n            return urls\r\n        end,\r\n    },\r\n    AFR = {\r\n        name = \"Adventures in the Forgotten Realms\",\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n        date = \"2021-07-23\",\r\n    },\r\n    UST = {\r\n        packImage = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n        date = \"2017-12-08\",\r\n    },\r\n    UGL = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n        date = \"1998-08-11\",\r\n    },\r\n    UNH = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n        date = \"2024-11-19\",\r\n    },\r\n    VOW = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad: Crimson Vow\",\r\n        date = \"2021-11-19\",\r\n    },\r\n    UMA = {\r\n        packImage = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n        date = \"2018-12-07\",\r\n    },\r\n    CMM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n        date = \"2023-08-04\",\r\n        getUrls = BoosterUrls.default20CardPack,\r\n    },\r\n    MMA = {\r\n        packImage = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n        date = \"2013-06-07\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    SOK = {\r\n        packImage = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n        date = \"2005-06-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n        end,\r\n    },\r\n    NEO = {\r\n        packImage = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n        date = \"2022-02-18\",\r\n    },\r\n    BOK = {\r\n        packImage = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n        date = \"2025-02-04\",\r\n        getUrls = function(set)\r\n            local urls = BoosterUrls.swapLandForCommon(BoosterUrls.default15CardPack(set))\r\n            urls[15] = urls[15]:gsub(\"r:m\", \"r:r\")\r\n            return urls\r\n        end,\r\n    },\r\n    CHK = {\r\n        packImage = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n        date = \"2024-10-01\",\r\n    },\r\n    SPM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n        date = \"2025-09-26\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    TLA = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/18426860329109062848/8608CEB001CF861FC4A6AEB7DEFC99036DDCBC03/\",\r\n        name = \"Avatar: The Last Airbender\",\r\n        date = \"2025-11-21\",\r\n        getUrls = BoosterUrls.default14CardPack,\r\n    },\r\n    DOM = {\r\n        name = \"Dominaria\",\r\n        date = \"2018-04-27\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:legendary')\r\n        end,\r\n    },\r\n    WAR = {\r\n        name = \"War of the Spark\",\r\n        date = \"2019-05-03\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:planeswalker')\r\n        end,\r\n    },\r\n    ZNR = {\r\n        name = \"Zendikar Rising\",\r\n        date = \"2020-09-25\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.addCardTypeToPack(BoosterUrls.default15CardPack(set), 't:land+(is:spell+or+pathway)')\r\n        end,\r\n    },\r\n    CNS = {\r\n        name = \"Conspiracy\",\r\n        date = \"2014-06-06\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    CN2 = {\r\n        name = \"Conspiracy: Take the Crown\",\r\n        date = \"2016-08-26\",\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n        end,\r\n    },\r\n    ISD = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    DKA = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    SOI = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    EMN = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '+-is:transform', '+is:transform')\r\n        end,\r\n    },\r\n    ICE = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    ALL = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    CSP = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    MH1 = {\r\n        getUrls = function(set)\r\n            return BoosterUrls.createReplacementSlotPack(BoosterUrls.default15CardPack(set), set, '', '+t:basic+t:snow')\r\n        end,\r\n    },\r\n    KHM = {\r\n        packImage = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n        date = \"2021-02-05\",\r\n    },\r\n}\r\n\r\n-- any with names that cannot be lua keys can go below\r\n\r\nsetDefinitions['???'] = {\r\n    getUrls = function(set)\r\n        return {}\r\n    end,\r\n}\r\n\r\nsetDefinitions['2XM'] = {\r\n    packImage = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n    name = \"Double Masters\",\r\n    date = \"2020-08-07\",\r\n    getUrls = BoosterUrls.default16CardPack,\r\n}\r\n\r\n-----------------------------------------------------------------------\r\n-- Main script\r\n-----------------------------------------------------------------------\r\n\r\nfunction onLoad()\r\n    updateObject()\r\n    data.lastDescription = self.getDescription()\r\n    if data.setCode == config.defaultSetCode then\r\n        self.addContextMenuItem(\"Spawn Boxes\", spawnSupportedPacks)\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    data.timePassed = data.timePassed + Time.delta_time\r\n    if data.timePassed >= config.pollInterval then\r\n        data.timePassed = 0\r\n        onUpdateTick()\r\n    end\r\nend\r\n\r\nfunction onUpdateTick()\r\n    if hasDescriptionChanged() then\r\n        updateObject()\r\n    end\r\n    PackBuilder.processRequestQueue()\r\nend\r\n\r\nfunction onObjectLeaveContainer(container, leaveObject)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setData = setDefinitions[data.setCode]\r\n    if setData and setData.name then\r\n        leaveObject.setName(setData.name .. \" Booster (\" .. data.setCode .. \")\")\r\n        leaveObject.setDescription(\"SET: \" .. data.setCode .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n    else\r\n        leaveObject.setName(data.setCode .. \" Booster\")\r\n    end\r\n\r\n    data.boosterCount = data.boosterCount + 1\r\n    local currentBoosterID = data.boosterCount\r\n\r\n    local urls = BoosterUrls.getSetUrls(data.setCode)\r\n    PackBuilder.fetchDeckData(currentBoosterID, data.setCode, urls, leaveObject)\r\n\r\n    leaveObject.createButton {\r\n        label = \"generating \" .. data.setCode,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.createButton {\r\n        label = \"remaining: \" .. #urls,\r\n        click_function = \"noop\",\r\n        function_owner = self,\r\n        position = { 0, 0.2, 1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        hover_color = { 0, 0, 0, 95 },\r\n        press_color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    }\r\n\r\n    leaveObject.setLuaScript(\"function tryObjectEnter() return false end\")\r\n    leaveObject.setCustomObject({ diffuse = PackBuilder.getRandomPackImage(data.setCode) })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(function()\r\n                    if leaveObject == null then\r\n                        return\r\n                    end\r\n                    local objectData = leaveObject.getData()\r\n                    leaveObject.destruct()\r\n                    objectData.ContainedObjects = PackBuilder.cache[currentBoosterID]\r\n                    local generatedBooster = spawnObjectData({ data = objectData })\r\n                    generatedBooster.setLuaScript(packLua)\r\n                end, function()\r\n                    return leaveObject == null or leaveObject.resting\r\n                end)\r\n            end,\r\n            function()\r\n                return PackBuilder.cache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction hasDescriptionChanged()\r\n    local description = self.getDescription()\r\n    if description ~= data.lastDescription then\r\n        data.lastDescription = description\r\n        return true\r\n    end\r\nend\r\n\r\nfunction updateObject()\r\n    data.setCode = string.upper(self.getDescription()):match(\"SET:%s*(%S+)\") or config.defaultSetCode\r\n\r\n    local packImage = PackBuilder.getRandomPackImage(data.setCode)\r\n    if self.getCustomObject().diffuse ~= packImage then\r\n        self.setCustomObject({ diffuse = packImage })\r\n        Wait.time(function()\r\n            self.reload()\r\n        end, 0.1)\r\n    end\r\n\r\n    self.clearButtons()\r\n    if packImage == config.defaultPackImage then\r\n        self.createButton({\r\n            label = data.setCode .. \" Boosters\",\r\n            click_function = \"noop\",\r\n            function_owner = self,\r\n            position = { 0, 0.2, -1.6 },\r\n            rotation = { 0, 0, 0 },\r\n            width = 1000,\r\n            height = 200,\r\n            font_size = 130,\r\n            color = { 0, 0, 0, 95 },\r\n            hover_color = { 0, 0, 0, 95 },\r\n            press_color = { 0, 0, 0, 95 },\r\n            font_color = { 1, 1, 1, 95 }\r\n        })\r\n    end\r\nend\r\n\r\nfunction spawnSupportedPacks()\r\n    local orderedSetCodes = {}\r\n    for setCode, setData in pairs(setDefinitions) do\r\n        if setData.packImage then\r\n            table.insert(orderedSetCodes, {\r\n                code = setCode,\r\n                name = setData.name,\r\n                date = setData.date,\r\n            })\r\n        end\r\n    end\r\n    table.sort(orderedSetCodes, function(a, b)\r\n        if not a.date then\r\n            return false\r\n        end\r\n        if not b.date then\r\n            return true\r\n        end\r\n        return a.date < b.date\r\n    end)\r\n    local startPos = self.getPosition() + Vector(3, 0, 0)\r\n    local cols, spacingX, spacingZ = 10, 3, 5\r\n    for index, setData in ipairs(orderedSetCodes) do\r\n        Wait.time(function()\r\n            local row = math.floor((index - 1) / cols)\r\n            local col = (index - 1) % cols\r\n            local copy = self.clone({\r\n                position = {\r\n                    x = startPos.x + col * spacingX,\r\n                    y = startPos.y,\r\n                    z = startPos.z - row * spacingZ,\r\n                },\r\n                snap_to_grid = false,\r\n            })\r\n            if setData and setData.name then\r\n                copy.setName(setData.name .. \" Booster (\" .. setData.code .. \")\")\r\n                copy.setDescription(\"SET: \" .. setData.code .. (setData.date and \"\\nReleased: \" .. setData.date or \"\"))\r\n            else\r\n                copy.setName(setData.code .. \" Booster\")\r\n            end\r\n        end, (index - 1) * 0.1)\r\n    end\r\nend\r\n\r\nfunction noop()\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "b1f2c4",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": 4.491606,
            "posY": 1.5683707,
            "posZ": -4.91883373,
            "rotX": 0.00171648641,
            "rotY": -1.60544441E-05,
            "rotZ": -0.00235983846,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    },
    {
      "GUID": "db479f",
      "Name": "Notecard",
      "Transform": {
        "posX": 4.530871,
        "posY": 1.03,
        "posZ": -10.3715067,
        "rotX": -2.633566E-08,
        "rotY": -1.12888233E-06,
        "rotZ": 5.58714675E-08,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "REPLACE \"SET: ???\" IN BOX DESCRIPTION",
      "Description": "\nAlmost all sets are supported, see:\nhttps://scryfall.com/sets\n\nCustom pack images are available for:\nCMB1, FIN, INR, DFT, EOE, TDM, FDN, DSK, BLB, MH3, MKM, OTJ, RVR, XLN, MID, STX, AFR, UST, UGL, UNH, VOW, UMA, CMM, MMA, SOK, NEO, BOK, CHK, SPM, TLA, KHM, 2XM",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": false,
      "Snap": false,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    }
  ]
}